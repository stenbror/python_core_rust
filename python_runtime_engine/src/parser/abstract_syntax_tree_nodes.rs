use crate::parser::lexical_analyzer::Token;

/// Nodes that represents a Python sourcecode parsed correctly
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ParseNode {

	/* Expression nodes */
	PyNone(u32, u32, Box<Token>),
	PyFalse(u32, u32, Box<Token>),
	PyTrue(u32, u32, Box<Token>),
	PyEllipsis(u32, u32, Box<Token>),
	PyName(u32, u32, Box<Token>),
	PyNumber(u32, u32, Box<Token>),
	PyString(u32, u32, Box<Vec<Box<Token>>>),
	PyAtomExpr(u32, u32, Option<Token>, Box<ParseNode>, Box<Vec<Box<ParseNode>>>),
	PyPower(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyUnaryPlus(u32, u32, Box<Token>, Box<ParseNode>),
	PyUnaryMinus(u32, u32, Box<Token>, Box<ParseNode>),
	PyUnaryBitInvert(u32, u32, Box<Token>, Box<ParseNode>),
	PyMul(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyDiv(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyFloorDiv(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyModulo(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyMatrices(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyPlus(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyMinus(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyShiftLeft(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyShiftRight(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyBitAnd(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyBitXor(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyBitOr(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyStarExpr(u32, u32, Box<Token>, Box<ParseNode>),
	PyLess(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyLessEqual(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyEqual(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyGreaterEqual(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyGreater(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyNotEqual(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyIn(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyNotIn(u32, u32, Box<ParseNode>,  Box<Token>, Box<Token>, Box<ParseNode>),
	PyIs(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyIsNot(u32, u32, Box<ParseNode>, Box<Token>, Box<Token>, Box<ParseNode>),
	PyNotTest(u32, u32, Box<Token>, Box<ParseNode>),
	PyAndTest(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyOrTest(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyLambda(u32, u32, Box<Token>, Option<Box<ParseNode>>, Box<Token>, Box<ParseNode>),
	PyTest(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyNamedExpr(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyTuple(u32, u32, Box<Token>, Option<Box<ParseNode>>, Box<Token>),
	PyList(u32, u32, Box<Token>, Option<Box<ParseNode>>, Box<Token>),
	PySet(u32, u32, Box<Token>, Option<Box<ParseNode>>, Box<Token>),
	PyDictionary(u32, u32, Box<Token>, Option<Box<ParseNode>>, Box<Token>),
	PyExprList(u32, u32, Box<Vec<Box<ParseNode>>>, Box<Vec<Box<Token>>>),
	PyTestList(u32, u32, Box<Vec<Box<ParseNode>>>, Box<Vec<Box<Token>>>),
	PyArgList(u32, u32, Box<Vec<Box<ParseNode>>>, Box<Vec<Box<Token>>>),
	PySubscriptList(u32, u32, Box<Vec<Box<ParseNode>>>, Box<Vec<Box<Token>>>),
	PySubscript(u32, u32, Option<Box<ParseNode>>, Option<Box<Token>>, Option<Box<ParseNode>>, Option<Box<Token>>, Option<Box<ParseNode>>),
	PyArgumentVarList(u32, u32, Box<Token>, Box<ParseNode>),
	PyArgumentKeywordList(u32, u32, Box<Token>, Box<ParseNode>),
	PyArgument(u32, u32, Box<ParseNode>, Option<Box<Token>>, Option<Box<ParseNode>>),
	PySyncCompFor(u32, u32, Box<Token>, Box<ParseNode>, Box<Token>, Box<ParseNode>, Option<Box<ParseNode>>),
	PyCompFor(u32, u32, Box<Token>, Box<ParseNode>),
	PyCompIf(u32, u32, Box<Token>, Box<ParseNode>, Option<Box<ParseNode>>),
	PyYieldExpr(u32, u32, Box<Token>, Box<ParseNode>),
	PyYieldFromExpr(u32, u32, Box<Token>, Box<Token>, Box<ParseNode>),
	PyDotName(u32, u32, Box<Token>, Box<Token>),
	PyCall(u32, u32, Box<Token>, Option<Box<ParseNode>>, Box<Token>),
	PyIndex(u32, u32, Box<Token>, Option<Box<ParseNode>>, Box<Token>),
	PyDictionaryContainer(u32, u32, Box<Vec<Box<ParseNode>>>, Box<Vec<Box<Token>>>),
	PyDictionaryEntry(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PySetContainer(u32, u32, Box<Vec<Box<ParseNode>>>, Box<Vec<Box<Token>>>),
	PyDictionaryFrom(u32, u32, Box<Token>, Box<ParseNode>),

	/* Statement nodes */
	PySimpleStmt(u32, u32, Box<Vec<Box<ParseNode>>>, Box<Vec<Box<Token>>>, Box<Token>),
	PyPlusAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyMinusAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyMulAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyDivAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyFloorDivAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyBitAndAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyBitXorAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyBitOrAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyShiftLeftAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyShiftRightAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyPowerAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),
	PyModuloAssign(u32, u32, Box<ParseNode>, Box<Token>, Box<ParseNode>),

	PyPass(u32, u32, Box<Token>),
	PyDel(u32, u32, Box<Token>, Box<ParseNode>),
	PyBreak(u32, u32, Box<Token>),
	PyContinue(u32, u32, Box<Token>),
	PyReturn(u32, u32, Box<Token>, Option<Box<ParseNode>>),
	PyRaise(u32, u32, Box<Token>, Box<ParseNode>, Option<Box<Token>>, Option<Box<ParseNode>>),

	PyGlobal(u32, u32, Box<Token>, Box<Vec<Box<Token>>>, Box<Vec<Box<Token>>>),
	PyNonLocal(u32, u32, Box<Token>, Box<Vec<Box<Token>>>, Box<Vec<Box<Token>>>),
	PyAssert(u32, u32, Box<Token>, Box<ParseNode>, Option<Box<Token>>, Option<Box<ParseNode>>),


	PyEvalInput(u32, u32, Box<ParseNode>, Box<Vec<Box<Token>>>),
	PyFileInput(u32, u32, Box<Vec<Box<ParseNode>>>, Box<Vec<Box<Token>>>),
}